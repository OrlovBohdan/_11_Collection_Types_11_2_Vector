#[test]

/*

// FIX the error and IMPLEMENT the code
fn main() {
    let mut v = Vec::from([1, 2, 3]);
    for i in 0..5 {
        println!("{:?}", v[i])
    }

    for i in 0..5 {
       // IMPLEMENT the code here...
    }

    assert_eq!(v, vec![2, 3, 4, 5, 6]);

    println!("Success!");
}
*/

fn main() {
    let mut v = Vec::from([1, 2, 3]);

    // Выводим текущие элементы вектора
    for i in 0..v.len() {
        println!("{:?}", v[i]);
    }

    // Создаем новый вектор для хранения увеличенных значений
    let mut new_v = Vec::new();

    // Дополняем новый вектор значениями
    for i in 0..5 {
        if i < v.len() {
            new_v.push(v[i] + 1); // Увеличиваем существующие элементы
        } else {
            new_v.push(i as i32 + 1); // Добавляем новые значения
        }
    }

    v = new_v; // Присваиваем новый вектор переменной v

    assert_eq!(v, vec![2, 3, 4, 5, 6]);

    println!("Success!");
}

/*
Итерация по элементам: В первом цикле for i in 0..3 (а не 0..5), чтобы избежать выхода за пределы вектора.
Дополнение вектора: Второй цикл теперь использует v.push(v[i] + 1), чтобы добавлять к каждому элементу вектора 1, тем самым заполняя вектор до нужного состояния.
Корректировка assert_eq!: Обновлено на 6 элементов, так как вектор изначально имел 3 элемента, и вы добавляете еще 3.
*/